Suppose we want to push an item to the front of a vector. What is the efficiency of such an operation: linear time
Suppose we want to push an item to the front of a singly linked list. What is the efficiency of such an operation : constant time
Suppose we'd like to access an element at an arbitrary index within a vector. What would be the efficiency : constant time
Suppose we'd like to access an element at an arbitrary index within a linked list. What would be the efficiency : linear time
Suppose we'd like to remove an arbitrary item from a vector. What is the efficiency: linear time
Suppose we'd like to remove an arbitrary item from a linked list. Suppose also, we already have a pointer to that item's container node. What is the efficiency: constant time
Suppose we'd like to add an item to the end (push back) of two data structures: A linked list and a vector.
Which data structure is technically faster in the worst-case: list
What is the efficiency class of this operation on a vector: O(1)
What is the efficiency class of this operation on a linked list: O(1)
Suppose we perform this operation many many many times on both our two data structures. How would their average efficiency compare: About the same
Suppose we'd like to check if a vector is empty. What is the efficiency of that operation: constant time
Suppose we'd like to check if a linked list is empty. What is the efficiency of that operation: constant time